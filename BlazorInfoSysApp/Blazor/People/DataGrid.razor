
<MudDataGrid T="Person" MultiSelection="true" Items="@People" Sort-Mode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
    Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged" 
    Hover="true" Dense="true">

    <ToolBarContent>
        <MudText Typo="Typo.h6">People Data</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adorment="Adornment.Start" Immediate="true"
            AdormentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <Columns>
        @* <SelectColumn T="Person" /> *@
        <PropertyColumn Property="x => x.Lastname" Sortable="true" Filterable="true" StickyLeft="true"/>
        <PropertyColumn Property="x => x.Firstname" />
        <PropertyColumn Property="x => x.Middlename" SortBy="@_sortBy"/>
        <PropertyColumn Property="x => x.Age" />
        <PropertyColumn Property="x => x.Birthday" Format="MMMM d, yyyy"/>
        <PropertyColumn Property="x => x.PhoneNumber" />
        <PropertyColumn Property="x => x.Email" />
        <PropertyColumn Property="x => x.City" />
        <PropertyColumn Property="x => x.WorkTitle" />
        <TemplateColumn StickyRight="true">
            <CellTemplate>
                <MudStack Row>
                    <MudTooltip Text="Edit" Arrow="true" Placement="Placement.Top" >
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" OnClick="@(() => GetProductId(context.Item.PersonId))"/>
                    </MudTooltip>
                    <MudTooltip Text="Delete" Arrow="true" Placement="Placement.Top" >
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" Color="@Color.Warning" OnClick="@(() => DeletePerson(context.Item))" />
                    </MudTooltip>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>

    <PagerContent>
        <MudDataGridPager T="Person" />
    </PagerContent>
</MudDataGrid>

<MudMessageBox @ref="_mudMessageBox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Deleting can <b><i>not</i></b> be undone!
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code {

    [Inject]
    public DataContext? Context { get; set;}

    [Inject]
    NavigationManager? NavManager {get; set;}

    public IEnumerable<Person> People { get; set;} = Enumerable.Empty<Person>();

    private string _searchString;
    private bool _sortNameByLenght;
    private List<string> _events = new();

    private Func<Person, object> _sortBy => x =>
    {
        if (_sortNameByLenght)
            return x.Lastname.Length;
        else
            return x.Lastname;
    };

    private Func<Person, bool> _quickFilter => x => {
        if(string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Lastname.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Firstname.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.City.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.WorkTitle.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        // Elements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
        People = await Context?.People?.ToListAsync();
    }


    private void GetProductId(long id)
    {
        Console.WriteLine($"Product ID from button: {id}");
        NavManager?.NavigateTo($"/edit/{id}");
        // Perform additional actions here
    }

    private MudMessageBox _mudMessageBox;


    private async void DeletePerson(Person p)
    {
        bool? result = await _mudMessageBox.ShowAsync();
        if(result != null) {
            if(Context != null){
                
                Context.Remove(p);
                await Context.SaveChangesAsync();
                
                DeleteSuccessSnackbar();
                StateHasChanged();

                await Task.Delay(2000);
                NavManager?.NavigateTo("/people", true);
                
            }
        } else {
            
        }
    }


    [Inject]
    public ISnackbar Snackbar { get; set; }

    public void DeleteSuccessSnackbar()
    {
        Snackbar.Add("Deleted Successfully!", Severity.Warning, options => {
            options.CloseAfterNavigation = true;
        });
    }
   
    void RowClicked(DataGridRowClickEventArgs<Person> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<Person> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<Person> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

}